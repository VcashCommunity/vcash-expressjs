//
//  Copyright (C) 2015 whphhg
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version. For more information read the
//  complete license in LICENSE.md.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

extends layout
block content
  script.
    "use strict";

    var views = {};
    var blocks = 0;
    var balance = 0;
    var moneysupply = 0;
    var accounts_tables = {};
    var blendstate = '';

    var local_currency = {
      'code':'',
      'btc':0,
      'vanilla_average':0
    };

    var local_params = {
      'symbol':'',
      'decimal':0,
      'thousand':0
    };

    /**
     * Socket.io on 20123
     */
    var socket = io(':20123');

    /**
     * Set stylesheet
     */
    socket.on('stylesheet', function(stylesheet) {
      $('head link#theme').attr('href', '/stylesheets/' + stylesheet.toLowerCase() + '.css');
    });

    /**
     * Alerts event
     */
    socket.on('alerts', function(text) {
      alert(text);
    });

    /**
     * Update wallet info #[span#key] elements
     */
    socket.on('wallet_info', function(wallet_info) {
      for (var i in wallet_info) {
        if (i === 'balance' || i === 'denominatedbalance' || i === 'nondenominatedbalance' || i === 'blendedbalance') {
          $('#' + i).text(accounting.formatMoney(wallet_info[i], '', 6, ',', '.'));
        } else if (i === 'blendedpercentage') {
          $('#' + i).text(wallet_info[i].toFixed(2));
        } else {
          $('#' + i).text(wallet_info[i]);
        }
      }

      if (wallet_info.stake === 0) {
        $('#nav-staking').addClass('hidden');
      } else {
        $('#nav-staking').removeClass('hidden');
      }

      if (wallet_info.newmint === 0) {
        $('#nav-immature').addClass('hidden');
      } else {
        $('#nav-immature').removeClass('hidden');
      }

      balance = wallet_info.balance;
      blocks = wallet_info.blocks;
      moneysupply = wallet_info.moneysupply;
      blendstate = wallet_info.blendstate;

      $('#connected_to_nodes').text(wallet_info.connections);

      /**
       * Show / hide Chainblender information
       */
      if (blendstate) {
        $('#chainblenderAvailable').removeClass('hidden');
        $('#chainblenderUnavailable').addClass('hidden');
      } else {
        $('#chainblenderUnavailable').removeClass('hidden');
        $('#chainblenderAvailable').addClass('hidden');
      }
    });

    /**
     * Update currency info
     */
    socket.on('currency_info', function(currency) {
      local_params = local_currency_params(currency.code);
      local_currency = currency;

      /**
       * Update #[span#key] elements
       */
      $('#vnl_btc').text(accounting.formatMoney(currency.vanilla_average, '', 8, ',', '.'));
      $('#vnl_local').text(accounting.formatMoney(currency.vanilla_average * currency.btc, local_params.symbol, 3, local_params.thousand, local_params.decimal) + ' ' + currency.code);
      $('#vnl_local_marketcap').text(accounting.formatMoney(currency.vanilla_average * moneysupply * currency.btc, local_params.symbol, 0, local_params.thousand, local_params.decimal) + ' ' + currency.code);
      $('#balance_btc').text(accounting.formatMoney(currency.vanilla_average * balance, '', 8, ',', '.'));
      $('#balance_local').text(accounting.formatMoney(currency.vanilla_average * balance * currency.btc, local_params.symbol, 2, local_params.thousand, local_params.decimal) + ' ' + currency.code);

      /**
       * Update conversion form LOCAL option with local currency & select current currency
       */
      $('#select_converting_currency option[value="LOCAL"]').text(currency.code);
      $('#select_local_currency').text(currency.code);
    });

    /**
     * Returns local currency properties
     */
    function local_currency_params(currency) {
      var symbol = '';
      var decimal = '.';
      var thousand = ',';

      if (currency === 'AUD' || currency === 'CAD' || currency === 'HKD' || currency === 'NZD' || currency === 'SGD' || currency === 'USD') {
        symbol = '$';
      } else if (currency === 'CNY') {
        symbol = '元';
      } else if (currency === 'GBP') {
        symbol = '£';
      } else if (currency === 'ILS') {
        symbol = '₪';
      } else if (currency === 'INR') {
        symbol = '₹';
      } else if (currency === 'JPY') {
        symbol = '¥';
      } else if (currency === 'KRW') {
        symbol = '₩';
      } else if (currency === 'MXN' || currency === 'PHP') {
        symbol = '₱';
      } else if (currency === 'THB') {
        symbol = '฿';
      } else if (currency === 'TRY') {
        symbol = '₤';
      } else if (currency === 'EUR') {
        symbol = '€';
        decimal = ',';
        thousand = '.';
      }

      return {
        'symbol':symbol,
        'decimal':decimal,
        'thousand':thousand
      };
    }

    /**
     * Populate possible views object
     */
    $(document).ready(function() {
      $('#views > div').map(function() {
        if ($('#' + this.id).hasClass('hidden')) {
          views[this.id] = true;
        } else {
          views[this.id] = false;
        }
      });
    });

    /**
     * Set view
     */
    function set_view(view) {
      if (!views[view] || view === 'view-home') {
        /**
         * Hide all, show Home
         */
        for (var i in views) {
          views[i] = true;
          $('#' + i + '-li').removeClass('active');

          if (!$('#' + i).hasClass('hidden')) {
            $('#' + i).addClass('hidden');
          }
        }

        views['view-home'] = false;
        $('#view-home').removeClass('hidden');

        /**
         * Adjust headers of visible accounts tables
         */
        for (var i in accounts_tables) {
          if (!$('#addresses-' + i).hasClass('hidden')) {
            accounts_tables[i].columns.adjust();
          }
        }

        /**
         * Adjust header of watchonly table if visible
         */
        if (!$('#addresses-watchonly').hasClass('hidden')) {
          watchlist_table.columns.adjust();
        }

        /**
         * Doesn't slow down page-load time as much as adjusting the headers
         */
        socket.emit('cache_send', 'transactions.log');
        socket.emit('cache_send', 'trades');
      } else {
        /**
         * Hide all, show view
         */
        for (var i in views) {
          views[i] = true;
          $('#' + i + '-li').removeClass('active');

          if (!$('#' + i).hasClass('hidden')) {
            $('#' + i).addClass('hidden');
          }
        }

        views[view] = false;
        $('#' + view).removeClass('hidden');
        $('#' + view + '-li').addClass('active');
      }
    }

  nav.navbar.navbar-default
    .container-fluid
      .row
        .col-md-12
          .navbar-header
            a.navbar-brand(href='http://v.cash', target='_blank')
              img(src='/images/vanilla.png')
          .collapse.navbar-collapse
            ul.nav.navbar-nav
              li
                h3.navbar-text.font-mono #[span#balance]
              li.dropdown#chainblender
                a.dropdown-toggle(href='#', data-toggle='dropdown', data-placement='bottom', title='Chainblender')
                  i.glyphicon.glyphicon-link
                script.
                  $('li#chainblender a').tooltip();
                  $('li#chainblender a').click(function() {
                    $('.tooltip').hide();
                  });

                ul.dropdown-menu
                  li
                    .navbar-chainblender
                      #chainblenderAvailable
                        .row
                          .col-md-7
                            p Blendstate
                            p Denominated balance
                            p Non-denominated balance
                            p Blended balance
                            p Blended percentage
                          .col-md-5
                            p
                              b #[span#blendstate]
                            p
                              b #[span#denominatedbalance]
                            p
                              b #[span#nondenominatedbalance]
                            p
                              b #[span#blendedbalance]
                            p
                              b #[span#blendedpercentage]%
                        .row
                          .col-md-12
                            .m-t-10
                              .btn-group(role='group')
                                button(type='button' id='chainblenderStartBtn' class='btn') Start
                                button(type='button' id='chainblenderStopBtn' class='btn') Stop

                      #chainblenderUnavailable
                        b Unlock the wallet to use Chainblender.

                      script.
                        /**
                         * Don't hide dropdown when you change select field or click on .row div
                         */
                        $('.dropdown-menu .row').click(function(e) {
                          e.stopPropagation();
                        });

                        $('#chainblenderStartBtn').click(function(e) {
                          socket.emit('chainblender', 'start')
                        });

                        $('#chainblenderStopBtn').click(function(e) {
                          socket.emit('chainblender', 'stop')
                        });

              li
                h3.navbar-text.font-mono #[span#balance_btc] BTC  &nbsp;#[span#balance_local]
              li#refresh-li
                a(href='#', data-toggle='tooltip', data-placement='bottom', title='Refresh transactions & accounts')
                  i.glyphicon.glyphicon-refresh
                script.
                  $('[data-toggle="tooltip"]').tooltip();
                  $('li#refresh-li').click(function() {
                    socket.emit('refresh', true);
                    $('.tooltip').hide();
                  });

              li#home-li
                a(href='#', data-toggle='tooltip', data-placement='bottom', title='Home')
                  i.glyphicon.glyphicon-home
                script.
                  $('[data-toggle="tooltip"]').tooltip();
                  $('#home-li').click(function() {
                    set_view('view-home');
                    $('.tooltip').hide();
                  });

              li.dropdown#transfer
                a.dropdown-toggle(href='#', data-toggle='dropdown', data-placement='bottom', title='Transfer coins')
                  i.glyphicon.glyphicon-send
                script.
                  $('li#transfer a').tooltip();
                  $('li#transfer a').click(function() {
                    $('.tooltip').hide();
                  });
                ul.dropdown-menu
                  li
                    .navbar-transfer
                      .row
                        .col-md-4
                          .btn-group.btn-group-justified
                            .btn-group
                              input.btn(type='button', id='button_transfer_add_recipient', value='+')
                            .btn-group
                              input.btn(type='submit', id='button_transfer', value='Transfer')
                        .col-md-8#form_transfer
                          input.col-md-3(id='input_transfer_amount', type='text', placeholder='Amount')
                          input.col-md-9(id='input_transfer_recipient', type='text', maxlength='34', placeholder='A valid address')
                        script.
                          $('[data-toggle="tooltip"]').tooltip();
                          /**
                           * Disable the button until inputs are filled
                           */
                          $('#button_transfer').prop('disabled', true);
                          $('#form_transfer input').keyup(function() {
                            var inputs_empty = false;

                            $('#form_transfer input').each(function() {
                              if ($(this).val().length === 0) {
                                inputs_empty = true;
                              }
                            });

                            if (inputs_empty) {
                              $('#button_transfer').prop('disabled', true);
                            } else {
                              $('#button_transfer').prop('disabled', false);
                            }
                          });

                          $('#button_transfer').click(function() {
                            socket.emit('validateaddress', [
                              $('#input_transfer_recipient').val(),
                              $('#input_transfer_amount').val()
                            ]);
                          });

                          /**
                           * If valid ask user to confirm transfer and then sendtoaddress, else do nothing
                           */
                          socket.on('transfer_possible', function(obj) {
                            var address = obj[0];
                            var amount = obj[1]

                            if (confirm("Recipient: " + address + "\nAmount: " + amount + "\n\nAre you sure you want to transfer the coins?") === true) {
                              socket.emit('sendtoaddress', [address, amount]);
                            }
                          });

              li#view-node-incentives-li
                a(href='#', data-toggle='tooltip', data-placement='bottom', title='Node incentives')
                  i.glyphicon.glyphicon-stats
                script.
                  $('[data-toggle="tooltip"]').tooltip();
                  $('li#view-node-incentives-li').click(function() {
                    set_view('view-node-incentives');
                    $('.tooltip').not(this).hide();
                  });

              li.dropdown#currency_conversion
                a.dropdown-toggle(href='#', data-toggle='dropdown', data-placement='bottom', title='Convert between currencies')
                  i.glyphicon.glyphicon-transfer
                script.
                  $('li#currency_conversion a').tooltip();
                  $('li#currency_conversion a').click(function() {
                    $('.tooltip').hide();
                  });
                ul.dropdown-menu
                  li
                    .navbar-convert
                      .row
                        .col-md-7
                          input.col-md-12(id='input_convert_amount', type='text', maxlength='15', placeholder='Convert')
                        .col-md-5
                          select.col-md-12.text-center(id='select_converting_currency')
                            option(value='XVC') XVC
                            option(value='BTC') BTC
                            option(value='LOCAL') LOCAL
                      .row
                        .col-md-12
                          #convert_currency.hidden.m-t-10
                            b #[span#convert_top] #[span#convert_top_name]
                            br
                            b #[span#convert_bottom] #[span#convert_bottom_name]
                      script.
                        $('#input_convert_amount').on('submit', function(e) {
                          e.preventDefault();
                        });

                        /**
                         * Don't hide dropdown when you change select field or click on .row div
                         */
                        $('.dropdown-menu select, .dropdown-menu .row').click(function(e) {
                          e.stopPropagation();
                        });

                        /**
                         * Allow only backspace, delete, left arrow, right arrow, period, enter, 0-9, numpad 0-9
                         */
                        $('#input_convert_amount').keydown(function(e) {
                          if (!(e.keyCode === 46 || e.keyCode === 8 || e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 190 || e.keyCode === 13 || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                            e.preventDefault();
                          }
                        });

                        $('#input_convert_amount').keyup(function() {
                          $("#convert_currency").removeClass('hidden');

                          if ($('#input_convert_amount').val() === '') {
                            $("#convert_currency").toggleClass('hidden');
                          }

                          /**
                           * Hide conversion info on currency switch and clear input field
                           */
                          $('#select_converting_currency').change(function() {
                            $("#convert_currency").addClass('hidden');
                            $('#input_convert_amount').val('');
                          });

                          if ($('#select_converting_currency').val() === 'XVC') {
                            /**
                             * Update convert to BTC values
                             */
                            $('#convert_top').text(accounting.formatMoney($('#input_convert_amount').val() * local_currency.vanilla_average, '', 8, ',', '.'));
                            $('#convert_top_name').text('BTC');

                            /**
                             * Update convert to LOCAL values
                             */
                            $('#convert_bottom').text(accounting.formatMoney($('#input_convert_amount').val() * local_currency.btc * local_currency.vanilla_average, local_params.symbol, 3, local_params.thousand, local_params.decimal));
                            $('#convert_bottom_name').text(local_currency.code);
                          } else if ($('#select_converting_currency').val() === 'BTC') {
                            /**
                             * Update convert to XVC values
                             */
                            $('#convert_top').text(accounting.formatMoney($('#input_convert_amount').val() / local_currency.vanilla_average, '', 6, ',', '.'));
                            $('#convert_top_name').text('XVC');

                            /**
                             * Update convert to LOCAL values
                             */
                            $('#convert_bottom').text(accounting.formatMoney($('#input_convert_amount').val() * local_currency.btc, local_params.symbol, 3, local_params.thousand, local_params.decimal));
                            $('#convert_bottom_name').text(local_currency.code);
                          } else {
                            /**
                             * Update convert to XVC values
                             */
                            $('#convert_top').text(accounting.formatMoney((1 / local_currency.btc * $('#input_convert_amount').val()) / local_currency.vanilla_average, '', 6, ',', '.'));
                            $('#convert_top_name').text('XVC');

                            /**
                             * Update convert to BTC values
                             */
                            $('#convert_bottom').text(accounting.formatMoney(1 / local_currency.btc * $('#input_convert_amount').val(), '', 8, ',', '.'));
                            $('#convert_bottom_name').text('BTC');
                          }
                        });

              li.dropdown#qr_generator
                a.dropdown-toggle(href='#', data-toggle='dropdown', data-placement='bottom', title='Generate a QR code')
                  i.glyphicon.glyphicon-qrcode
                script.
                  $('li#qr_generator a').tooltip();
                  $('li#qr_generator a').click(function() {
                    $('.tooltip').hide();
                  });

                ul.dropdown-menu
                  li
                    .navbar-qrcode
                      .row
                        .col-md-8
                          input.col-md-12(id='input_string_to_encode', type='text', maxlength='34', placeholder='Address to encode')
                        .col-md-4
                          input.btn.col-md-12(id='button_create_qr_code', type='button', value='Generate QR code')
                      .row
                        .col-md-12
                          #qr_output.hidden.m-t-10
                            .text-center #[span#qr_code]
                      script.
                        /**
                         * Disable the button until input is filled
                         */
                        $('#button_create_qr_code').prop('disabled', true);
                        $('#input_string_to_encode').keyup(function() {
                          $('#button_create_qr_code').prop('disabled', this.value === '' ? true : false);
                        });

                        $('#button_create_qr_code').click(function() {
                          $('#qr_output').removeClass('hidden');
                          $('#qr_code').empty();
                          $('#qr_code').qrcode({
                            'size': 150,
                            'text': $('#input_string_to_encode').val()
                          });
                        });

              p.navbar-text#nav-unconfirmed.hidden
                | Unconfirmed &nbsp;&nbsp;
                b #[span#unconfirmed]
              p.navbar-text#nav-staking.hidden
                | Staking &nbsp;&nbsp;
                b #[span#stake]
              p.navbar-text#nav-immature.hidden
                | Immature &nbsp;&nbsp;
                b #[span#newmint]
            ul.nav.navbar-nav.navbar-right
              li#view-network-li
                a(href='#', data-toggle='tooltip', data-placement='bottom', title='Network map')
                  i.glyphicon.glyphicon-signal
                script.
                  $('[data-toggle="tooltip"]').tooltip();
                  $('li#view-network-li').click(function() {
                    set_view('view-network');
                    $('.tooltip').not(this).hide();
                    peers_map.invalidateSize();
                    socket.emit('cache_send', 'nodes.connected')
                  });

              li#view-maintenance-li
                a(href='#', data-toggle='tooltip', data-placement='bottom', title='Maintenance')
                  i.glyphicon.glyphicon-cog
                script.
                  $('[data-toggle="tooltip"]').tooltip();
                  $('#view-maintenance-li').click(function() {
                    set_view('view-maintenance');
                    $('.tooltip').not(this).hide();
                  });

              li.dropdown#lock_unlock
                a.dropdown-toggle(href='#', data-toggle='dropdown', data-placement='bottom', title='Check wallet state')
                  i.glyphicon.glyphicon-lock
                script.
                  $('li#lock_unlock a').tooltip();
                  $('li#lock_unlock a').click(function() {
                    $('.tooltip').hide();
                  });

                  socket.on('wallet_status', function(error) {
                    /**
                     * error_code_wallet_wrong_enc_state = -15, wallet not encrypted
                     */
                    if (parseInt(error.code) === -15) {
                      $('#wallet_encrypt').removeClass('hidden');
                      $('#lock_unlock').addClass('red');
                    }
                    /**
                     * error_code_invalid_params = -32602, wallet is encrypted and locked (in this case)
                     */
                    else if (parseInt(error.code) === -32602) {
                      $('#wallet_lock').addClass('hidden');
                      $('#wallet_unlock').removeClass('hidden');
                      $('#lock_unlock').removeClass('red');

                      /**
                       * Disable input fields of forms that require the wallet to be unlocked
                       */
                      $('#input_import_private_key').prop('disabled', true);
                      $('#input_dump_private_key').prop('disabled', true);
                      $('#button_dump_wallet').prop('disabled', true);
                      $('#input_transfer_amount').prop('disabled', true);
                      $('#input_transfer_recipient').prop('disabled', true);
                    }
                    /**
                     * error_code_wallet_already_unlocked = -17, wallet unlocked
                     */
                    else if (parseInt(error.code) === -17) {
                      $('#wallet_unlock').addClass('hidden');
                      $('#wallet_lock').removeClass('hidden');
                      $('#lock_unlock').addClass('red');

                      /**
                       * Enable input fields of forms that require the wallet to be unlocked
                       */
                      $('#input_import_private_key').prop('disabled', false);
                      $('#input_dump_private_key').prop('disabled', false);
                      $('#button_dump_wallet').prop('disabled', false);
                      $('#input_transfer_amount').prop('disabled', false);
                      $('#input_transfer_recipient').prop('disabled', false);
                    }
                  });

                ul.dropdown-menu
                  li
                    .navbar-passphrase
                      .row
                        #wallet_unlock.hidden
                          .col-md-8
                            input.col-md-12(id='input_wallet_passphrase', type='password', placeholder='Wallet is locked! Enter passphrase to unlock')
                          .col-md-4
                            input.col-md-12.btn(type='submit', id='button_wallet_unlock', value='Unlock')
                          script.
                            /**
                             * Disable the button until input is filled
                             */
                            $('#button_wallet_unlock').prop('disabled', true);
                            $('#input_wallet_passphrase').keyup(function() {
                              $('#button_wallet_unlock').prop('disabled', this.value === '' ? true : false);
                            });

                            $('#button_wallet_unlock').click(function() {
                              socket.emit('walletpassphrase', $('#input_wallet_passphrase').val());
                              $('#input_wallet_passphrase').val('');
                            });

                        #wallet_lock.hidden
                          .col-md-12
                            input.btn.col-md-12(type='submit', id='button_wallet_lock', value='Wallet is unlocked! Lock it to prevent abuse')
                          script.
                            $('#button_wallet_lock').click(function(){
                              socket.emit('walletlock', true);
                            });

                        #wallet_encrypt.hidden
                          .col-md-8
                            input.col-md-12(id='input_encryption_key', type='password', placeholder='Enter passphrase')
                            input.col-md-12(id='input_encryption_key_repeat', type='password', placeholder='Repeat passphrase')
                          .col-md-4
                            input.col-md-12.btn(type='submit', id='button_wallet_encrypt', value='Encrypt')
                          script.
                            /**
                             * Disable the button until inputs are filled and matching
                             */
                            $('#button_wallet_encrypt').prop('disabled', true);
                            $('#wallet_encrypt input').keyup(function() {
                              if ($('#input_encryption_key').val() && $('#input_encryption_key_repeat').val()) {
                                if ($('#input_encryption_key').val() === $('#input_encryption_key_repeat').val()) {
                                  $('#button_wallet_encrypt').prop('disabled', false);
                                } else {
                                  $('#button_wallet_encrypt').prop('disabled', true);
                                }
                              }
                            });

                            $('#button_wallet_encrypt').click(function() {
                              socket.emit('encryptwallet', $('#input_encryption_key').val());
                              $('#wallet_encrypt').addClass('hidden');
                            });

              input.col-md-6.pull-right(type='text', id='filter_transactions', placeholder='Filter transactions')
              script.
                $('#filter_transactions').on('keyup search input paste cut', function() {
                  txs_table.search(this.value).draw();
                });

  #views.container-fluid
    #view-home
      .row
        .col-md-4
          .row.m-t-6
            .col-md-12
              #accounts
              script.
                socket.on('accounts', function(accounts) {
                  $('#accounts').empty();

                  for (var i in accounts) {
                    var hidden = 'hidden';

                    if (!accounts[i].hidden) {
                      hidden = '';
                    }

                    $('#accounts').append('<div class="row" id="clickable-' + i + '"><div class="col-md-6"><p class="nopadding"><i class="glyphicon glyphicon-book" />&nbsp; ' + accounts[i].account + '</p></div><div class="col-md-3 text-right"><p class="nopadding">' + accounts[i].received + '</p></div><div class="col-md-3 text-right"><p class="nopadding">' + accounting.formatMoney(accounts[i].received * local_currency.btc * local_currency.vanilla_average, local_params.symbol, 2, local_params.thousand, local_params.decimal) + ' ' + local_currency.code + '</p></div></div>');
                    $('#accounts').append('<div id="addresses-' + i + '" class="m-b-20 ' + hidden + '">');

                    var table = $('<table id="' + i + '" class="table table-striped table-hover"><thead><tr><th>Address</th><th style="width:17%">Received</th><th style="width:22%"></th></tr></thead></table>');
                    var address = '';

                    for (var j in accounts[i].addresses) {
                      if (accounts[i].addresses[j].confirmations > 0) {
                        address = '<a href="https://explorer.v.cash/address/' + accounts[i].addresses[j].address + '" target="_blank">' + accounts[i].addresses[j].address + '</a>';
                      } else {
                        address = accounts[i].addresses[j].address;
                      }

                      table.append('<tr><td class="font-mono">' + address + '</td><td class="text-right">' + accounting.formatMoney(accounts[i].addresses[j].received, '', 6, ',', '.') + '</td><td class="text-right">' + accounting.formatMoney(accounts[i].addresses[j].received * local_currency.btc * local_currency.vanilla_average, local_params.symbol, 2, local_params.thousand, local_params.decimal) + ' ' + local_currency.code + '</td></tr>');
                    }

                    $('#addresses-' + i).append(table);
                    $('#accounts').append('</div>');

                    accounts_tables[i] = $('#' + i).DataTable({
                      'searching':false,
                      'paging':false,
                      'info':false,
                      'scrollY':'234px',
                      'scrollCollapse':true,
                      'order':[[1, 'desc']],
                      'columnDefs':[{
                        'targets':2,
                        'orderable':false
                      }]
                    });
                  }

                  $('#accounts .row').click(function() {
                    var hidden = false;
                    var hash = $(this).attr('id').split('-')[1];

                    $('#addresses-' + hash).toggleClass('hidden');

                    if ($('#addresses-' + hash).hasClass('hidden')) {
                      hidden = true;
                    }

                    socket.emit('settings_set', {
                      'property':'hidden',
                      'value':hidden,
                      'hash':hash
                    });
                    accounts_tables[hash].columns.adjust();
                  });
                });

          .row.m-tb-10
            .col-md-5
              .btn-group.btn-group-justified
                .btn-group
                  input.col-md-9.btn(type='button', id='button_new_address', value='New address')
                .btn-group
                  input.col-md-12.btn(type='submit', id='button_import_private_key', value='Import')
            .col-md-7
              input.col-md-12(id='input_import_private_key', type='text', placeholder='A valid private key')
            script.
              $('#button_new_address').click(function(){
                var account = prompt("Enter an account name below if you want to assign your new address to one");

                if (account !== null) {
                  socket.emit('getnewaddress', account);
                }
              });

              /**
               * Disable the button until input is filled
               */
              $('#button_import_private_key').prop('disabled', true);
              $('#input_import_private_key').keyup(function() {
                $('#button_import_private_key').prop('disabled', this.value === '' ? true : false);
              });

              $('#button_import_private_key').click(function() {
                var account = prompt("Enter an account name below if you want to assign your address to one");

                if (account !== null) {
                  $('#button_import_private_key').prop('disabled', true);

                  socket.emit('importprivkey', {
                    'key':$('#input_import_private_key').val(),
                    'account':account
                  });

                  socket.on('importprivkey_response', function() {
                    $('#button_import_private_key').prop('disabled', false);
                  });
                }
              });

          .row.m-tb-10
            .col-md-12
              .row#clickable-watchonly
                .col-md-6
                  p.nopadding
                    i.glyphicon.glyphicon-eye-open
                    | &nbsp; Watch-only addresses
                .col-md-3.text-right
                  p.nopadding #[span#watchonlyTotal]
                .col-md-3.text-right
                  p.nopadding #[span#watchonlyTotalLocal]

              #addresses-watchonly.hidden
                #table_watch_addresses
                script.
                  socket.on('watch_addresses', function(watch) {
                    $('#table_watch_addresses').empty();

                    if (!watch.hidden) {
                      $('#addresses-watchonly').removeClass('hidden');
                    }

                    var totalReceived = 0;
                    var table = $('<table id="watchaddresses" class="table table-striped table-hover"><thead><tr><th style="width:45%">Address</th><th style="width:16%">Title</th><th style="width:17%">Balance</th><th style="width:22%"></th></tr></thead></table>');

                    for (key in watch.addresses) {
                      totalReceived += watch.addresses[key].balance
                      table.append('<tr><td class="font-mono"><a href="https://explorer.v.cash/address/' + key + '" target="_blank">' + key + '</a></td><td class="watchonly-title">' + watch.addresses[key].title + '</td><td class="text-right">' + accounting.formatMoney(watch.addresses[key].balance, '', 6, ',', '.') + '</td><td class="text-right">' + accounting.formatMoney(parseFloat(watch.addresses[key].balance) * local_currency.btc * local_currency.vanilla_average, local_params.symbol, 2, local_params.thousand, local_params.decimal) + ' ' + local_currency.code + '</td></tr>');
                    }

                    if (Object.keys(watch.addresses).length >= 2) {
                      $('#watchonlyTotal').text(accounting.formatMoney(totalReceived, '', 6, ',', '.'));
                      $('#watchonlyTotalLocal').text(accounting.formatMoney(parseFloat(totalReceived) * local_currency.btc * local_currency.vanilla_average, local_params.symbol, 2, local_params.thousand, local_params.decimal) + ' ' + local_currency.code);
                    }

                    $('#table_watch_addresses').append(table);
                    watchlist_table = $('#watchaddresses').DataTable({
                      'searching':false,
                      'paging':false,
                      'info':false,
                      'scrollY':'234px',
                      'scrollCollapse':true,
                      'order':[[1, 'asc']],
                      'columnDefs':[{
                        'targets':3,
                        'orderable':false
                      }]
                    });
                  });

                  $('#clickable-watchonly').click(function() {
                    var hidden = false;

                    $('#addresses-watchonly').toggleClass('hidden');

                    if ($('#addresses-watchonly').hasClass('hidden')) {
                      hidden = true;
                    }

                    socket.emit('settings_set', {
                      'property':'hidden',
                      'value':hidden,
                      'hash':'watchonly'}
                    );
                    watchlist_table.columns.adjust();
                  });

                .row.m-tb-10
                  .col-md-5
                    .btn-group.btn-group-justified
                      .btn-group
                        input.btn(type='submit', id='button_add_watch_address', value='Add to watch list')
                  .col-md-7#form_add_watch_address
                    input.col-md-3(id='input_watch_address_title', type='text', placeholder='Title')
                    input.col-md-9(id='input_watch_address', type='text', maxlength='34', placeholder='A valid address')
                  script.
                    /**
                     * Disable the button until inputs are filled
                     */
                    $('#button_add_watch_address').prop('disabled', true);
                    $('#form_add_watch_address input').keyup(function() {
                      var inputs_empty = false;

                      $('#form_add_watch_address input').each(function() {
                        if ($(this).val().length === 0) {
                          inputs_empty = true;
                        }
                      });

                      if (inputs_empty) {
                        $('#button_add_watch_address').prop('disabled', true);
                      } else {
                        $('#button_add_watch_address').prop('disabled', false);
                      }
                    });

                    $('#button_add_watch_address').click(function() {
                      socket.emit('addwatchaddress', {
                        'address':$('#input_watch_address').val(),
                        'title':$('#input_watch_address_title').val()
                      });
                    });

          .row-m-tb-10
            #table_trade_history
            script.
              socket.on('trades', function(trades) {
                $('#table_trade_history').empty();
                var table = $('<table id="trade_history" class="table table-striped table-hover"><thead><tr><th></th><th>Date</th><th>Type</th><th>BTC/XVC</th><th>XVC</th><th>BTC</th></tr></thead></table>');

                trades.forEach(function(trade) {
                  table.append('<tr><td><img style="padding-bottom:2px" src="images/' + trade.exchange +  '.png" /></td><td>' + moment(trade.date).format('YYYY-MM-DD HH:mm:ss') + '</td><td class="' + _.capitalize(trade.type.toLowerCase()) + '">' + _.capitalize(trade.type.toLowerCase()) + '</td><td class="text-right">' + parseFloat(trade.vanilla_rate).toFixed(8) + '</td><td class="text-right">' + parseFloat(trade.vanilla_amount).toFixed(8) + '</td><td class="text-right">' + parseFloat(trade.btc_total).toFixed(8) + '</td></tr>');
                });

                $('#table_trade_history').append(table);
                trades_table = $('#trade_history').DataTable({
                  'searching':false,
                  'paging':false,
                  'info':false,
                  'scrollY':'242px',
                  'scrollCollapse':true,
                  'order':[[1,'desc']]
                });
              });

        .col-md-8
          .row
            .col-md-12
              #table_complete_history
              script.
                socket.on('transactions', function(transactions) {
                  $('#table_complete_history').empty();
                  $('#graph_timeseries').empty();
                  $('#graph_rewards_monthly').empty();

                  var table = $('<table id="txhistory" class="table table-striped table-hover"><thead><tr><th>Transactions</th><th>Account</th><th>Address</th><th>Category</th><th>Amount</th><th></th><th>Block hash</th><th>txid</th></tr></thead></table>');
                  var unconfirmed = 0;
                  var rewards_spread = [];
                  var rewards_current_month = [];
                  var month = new Date().getMonth() + 1;
                  var year = new Date().getFullYear();
                  var days = new Date(year, month, 0).getDate();

                  /**
                   * Prepare empty array with days of the month
                   */
                  for (var i = 1;i <= days;i++) {
                    i < 10 ? prefix = '0' : prefix = '';

                    rewards_current_month.push({
                      'date':month + '-' + prefix + i,
                      'rewards':0
                    });
                  }

                  transactions.forEach(function(tx) {
                    if (tx.hasOwnProperty('blockhash')) {
                      if (tx.blockhash === '0000000000000000000000000000000000000000000000000000000000000000') {
                        blockhash = '----------';
                      } else {
                        blockhash = '<a href="https://explorer.v.cash/block/' + tx.blockhash + '" target="_blank">' + tx.blockhash.substring(54,64) + '</a>';
                      }
                    } else {
                      blockhash = '----------';
                    }

                    if (tx.confirmations === 0 && tx.category !== 'Self-send') {
                      unconfirmed += tx.amount;
                    }

                    /**
                     * Fill with incentive rewards
                     */
                    if (tx.hasOwnProperty('pos')) {
                      if (!tx.pos) {
                        var month_generated = new Date(tx.timereceived).getMonth() + 1;
                        var day_generated = new Date(tx.timereceived).getDate().toString();

                        if (month_generated === month) {
                          rewards_current_month[day_generated - 1].rewards += 1;
                        }

                        rewards_spread.push({
                          'value':tx.timereceived
                        });
                      }
                    }

                    var color = 'Buy';
                    var address = '<a href="https://explorer.v.cash/address/' + tx.address + '" target="_blank">' + tx.address + '</a>';
                    var confirmations_clean = '';

                    if (tx.category === 'Immature') {
                      confirmations_clean = ' (' + tx.confirmations + '/220)';
                    }

                    if (tx.confirmations === 0 && tx.category !== 'Immature') {
                      confirmations_clean = ' (0/1)';
                    }

                    if (tx.category === 'Sent' || tx.category === 'Sending') {
                      color = 'Sell';
                    }

                    if (tx.category === 'Self-send') {
                      color = '';
                    }

                    table.append('<tr><td>' + moment(tx.timereceived).format('YYYY-MM-DD HH:mm:ss') + '</td><td>' + tx.account + '</td><td class="font-mono">' + address + '</td><td>' + tx.category + confirmations_clean + '</td><td class="text-right ' + color + '">' + accounting.formatMoney(tx.amount, '', 6, ',', '.') + '</td><td class="text-right ' + color + '">' + accounting.formatMoney(tx.amount * local_currency.btc * local_currency.vanilla_average, local_params.symbol, 2, local_params.thousand, local_params.decimal) + ' ' + local_currency.code + '</td><td class="font-mono">' + blockhash + '</td><td class="font-mono"><a href="https://explorer.v.cash/tx/' + tx.txid + '" target="_blank">' + tx.txid.substring(0, 10) + '</a></td></tr>');
                  });

                  /**
                   * Create reward spread and rewards per day graphs
                   */
                  timeseries('#graph_timeseries', rewards_spread, false);
                  rewards_per_day('#graph_rewards_monthly', rewards_current_month);

                  if (rewards_spread.length > 0) {
                    $('#incentive_window_graphs').removeClass('hidden');
                    $('#about_incentives').addClass('hidden');
                  } else {
                    $('#incentive_window_graphs').addClass('hidden');
                    $('#about_incentives').removeClass('hidden');
                  }

                  if (unconfirmed === 0) {
                    $('#nav-unconfirmed').addClass('hidden');
                  } else {
                    $('#nav-unconfirmed').removeClass('hidden');
                  }

                  $('#table_complete_history').append(table);
                  $('#unconfirmed').text(unconfirmed);
                  $('#rewards_total').text(rewards_spread.length);

                  txs_table = $('#txhistory').DataTable({
                    'paging':false,
                    'info':false,
                    'scrollY':'783px',
                    'scrollCollapse':true,
                    'order':[[0,'desc']],
                    'sDOM':'null',
                    'columnDefs':[{
                      'targets':4,
                      'orderable':false
                    }]
                  });
                });

    #view-node-incentives.hidden
      .row
        .col-md-12
          b Vote candidate:
          | #[span#votecandidate] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          | #[span#ip]
          b :
          | #[span#port] (
          b #[span#networkstatus]
          | ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          b TCP:
          | #[span#connections]
          b &nbsp;&nbsp; UDP:
          | #[span#udp_connections] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          b Collateral:
          | #[span#collateralbalance] / #[span#collateralrequired]
      .row
        #incentive_window_graphs.hidden
          .col-md-6
            h4 REWARD SPREAD (#[span#rewards_total])
            .row.text-center #[span#graph_timeseries]
          .col-md-6
            h4 CURRENT MONTH
            .row.text-center #[span#graph_rewards_monthly]
        #about_incentives.hidden
          .col-md-12
            br
            p The node incentives system donates a portion of the miners coinbase reward to peers that are helping to maintain the network infrastructure. The system is constantly probing for good publicly addressable peers. These peers are voted on using a deterministic scoring system that is secured by the blockchain. Additionally there is a collateral mechanism that can prohibit votes from peers that do not have at least N amount of coins (in a single deposit) in their default wallet address. The only requirements for participating in the incentive system are a possible collateral deposit and a publically addressable peer.
            p
              b How do I know if my client is a candidate for incentive rewards?
              br
              | Vote candidate above would display true and you wouldn't be seeing this message.
            p
              b How much is the collateral deposit?
              br
              | A collateral deposit of at least 10000 into the default wallet address is required to be a vote candiate (started at block 220000).
            p
              b How do I deposit collateral?
              br
              | You send 10000 coins to the default wallet address (
              b #[span#walletaddress]
              | ) as a single transaction. Within some time it should reflect in
              b Vote candidate
              | above changing to true if the deposit was equal or greater than 10000.
            p
              b What is the incentive reward percentage?
              br
              | Check out
              a(href='https://gist.github.com/john-connor/967ba7f7e9dd0ec1f7a9', target='_blank') full schedule
              | or the
              a(href='https://gist.github.com/whphhg/304ec44a760477a98726', target='_blank') condensed version
              | .
            p
              b How do mining pools reward users?
              br
              | As found in getblocktemplate, they are required to include a transaction if the incentive address is not empty.
              blockquote
                p
                  | "incentive": {
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; "enforced": false,
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; "address": "VrOmvLuHfayJMlCDj3mRWdf7xrFsD53Tfw",
                  br
                  | &nbsp;&nbsp;&nbsp;&nbsp; "amount": 617283
                  br
                  | }

            p
              b What happens if a mining pool doesn't include the incentive transaction when required?
              br
              | The block will be dropped and their ban score will be incremented.
            p
              b Is there a guarantee I will be chosen to receive an incentive reward?
              br
              | No, some peers may not be providing reliable service or have bad luck due to variance.
            p The minimum computing requirements for running an incentivized node are:
            ul
              li Dual core CPU
              li 2 gigabytes of memory (Physical RAM)
              li 500 megabytes of free disk space
            p The above text is a lightly edited copy of
              a(href='http://v.cash/wiki/Technologies/Node%20Incentives.md', target='_blank') Node Incentives
              | from the Vcash wiki.
              | You can read more about it in the
              a(href='https://github.com/john-connor/papers/blob/master/incentive.pdf', target='_blank') whitepaper
              | .
      .row
        .col-md-2
          input.col-md-12(id='input_estimate_blocktime', type='text', maxlength='7', placeholder='Estimate future block time')
        .col-md-10#blocktime_estimation
          b #[span#future_block_already_submitted]
          #estimate_blocktime.hidden
            | Estimated block time is
            b #[span#future_block_estimated_time]
            | (#[span#future_block_in]) with an incentive reward of
            b #[span#incentive_reward]
            | , which is
            b #[span#future_block_percentage]
            | of Proof-of-Work reward at
            b #[span#pow_reward]
            | .
        script.
          $('#input_estimate_blocktime').on('submit', function(e) {
            e.preventDefault();
          });

          $('#input_estimate_blocktime').keyup(function() {
            $('#estimate_blocktime').addClass('hidden');
            $('#future_block_already_submitted').empty();

            if ($('#input_estimate_blocktime').val().length >= 6) {
              var time_per_block = 111;
              var future_block = parseInt($('#input_estimate_blocktime').val());
              var estimate = new Date();

              if (future_block - blocks > 0) {
                estimate.setSeconds(estimate.getSeconds() + (future_block - blocks) * time_per_block);
                socket.emit('incentive_reward', future_block);

                /**
                 * Calculate PoW reward (from https://github.com/john-connor/vanillacoin/blob/master/src/reward.cpp)
                 */
                var subsidy = 128000000;

                if (future_block < 325000) {
                  for (i = 50000; i <= future_block; i += 50000) {
                    subsidy -= subsidy / 6;
                  }
                } else if (future_block < 385000) {
                  for (i = 10000; i <= future_block; i += 10000) {
                    subsidy -= subsidy / 28;
                    subsidy = Math.ceil(subsidy);
                    subsidy -= (subsidy / 28 * 4) / 28;
                    subsidy = Math.ceil(subsidy);
                  }
                } else {
                  for (i = 7000; i <= future_block; i += 7000) {
                    subsidy -= subsidy / 28;
                    subsidy = Math.ceil(subsidy);
                    subsidy -= (subsidy / 28 * 4) / 28;
                    subsidy = Math.ceil(subsidy);
                  }
                }

                if ((subsidy / 1000000) < 1) {
                  subsidy = 1;
                  subsidy *= 1000000;
                }

                subsidy = subsidy / 1000000;

                /**
                 * Update text with % and incentive reward (in coins)
                 */
                socket.on('incentive_reward_response', function(obj) {
                  $('#future_block_percentage').text(obj + '%');
                  $('#incentive_reward').text(((subsidy / 100) * obj).toFixed(6));
                });

                $("#estimate_blocktime").removeClass('hidden');
                $('#pow_reward').text(subsidy.toFixed(6));
                $('#future_block_already_submitted').text('');
                $("#future_block_estimated_time").text(moment(estimate).format('YYYY-MM-DD HH:mm:ss'));
                $('#future_block_in').text(moment().to(estimate.toISOString()));
              } else {
                $('#future_block_already_submitted').text('Block already submitted');
                $("#estimate_blocktime").addClass('hidden');
              }
            }
          });

          /**
           * Allow only backspace, delete, left arrow, right arrow, enter, 0-9, numpad 0-9
           */
          $('#input_estimate_blocktime').keydown(function(e) {
            if (!(e.keyCode === 46 || e.keyCode === 8 || e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 13 || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
              e.preventDefault();
            }
          });

    #view-network.hidden
      .row
        .col-md-12
          #map
      .row.m-tb-10
        .col-md-12
          #table_getpeerinfo
      script.
        /**
         * Create new leaflet map
         */
        peers_map = new L.Map('map', {
          center: [43.321153, -28.602914],
          zoom: 4,
          zoomControl: false
        });

        /**
         * Add mapquest tile layer and give proper attributions
         */
        L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
          attribution: '&copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors. Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012.',
          maxZoom: 18
        }).addTo(peers_map);

        var controls_previous = null;
        var marker_groups_previous = {};

        /**
         * Custom marker icon
         */
        var vanilla_icon = L.icon({
          iconUrl: '/images/marker-icon.png',
          shadowUrl: '/images/marker-shadow.png'
        });

        /**
         * Update markers with lon/lat pairs from nodes_geomap
         */
        socket.on('nodes_geomap', function(nodes_geomap) {
          var marker_groups = {};
          var controls_selected = {};

          /**
           * Save checkbox states
           */
          $('.leaflet-control-layers-base :input').each(function() {
            controls_selected[$(this).context.parentElement.textContent.replace(' ','')] = $(this).context.checked;
          });

          /**
           * If controls are defined, remove them from the map
           */
          if (controls_previous !== null) {
            controls_previous.removeFrom(peers_map);
          }

          /**
           * Remove previously added overlays
           */
          for (var i in marker_groups_previous) {
            marker_groups_previous[i].clearLayers();
          }

          /**
           * Create layer groups and add markers
           */
          for (var i in nodes_geomap) {
            if (nodes_geomap[i].hasOwnProperty('lat') && nodes_geomap[i].hasOwnProperty('lon')) {
              /**
               * Add new subver to the object and initialize a new layer group as value
               */
              if (!marker_groups.hasOwnProperty(nodes_geomap[i].group)) {
                marker_groups[nodes_geomap[i].group] = L.layerGroup();
              }

              /**
               * Create a marker based on provided lat / lon and add it to the layer group
               */
              L.marker([nodes_geomap[i].lat, nodes_geomap[i].lon], {icon: vanilla_icon}).bindPopup('<p><b>Country</b>: ' + nodes_geomap[i].country + '</p><p><b>Address</b>: ' + nodes_geomap[i].addr + '</p><p><b>Version</b>: ' + nodes_geomap[i].subver_clean + '</p>').addTo(marker_groups[nodes_geomap[i].group]);
            }
          }

          /**
           * Prevent creating empty controls by checking length
           */
          if (Object.keys(marker_groups).length > 0) {
            for (var i in marker_groups) {
              /**
               * If there are no controls present yet, add every overlay, else only add currently selected overlays (preserve checkboxes)
               */
              if (Object.keys(controls_selected).length === 0) {
                marker_groups[i].addTo(peers_map);
                break;
              } else {
                if (controls_selected.hasOwnProperty(i)) {
                  if (controls_selected[i]) {
                    marker_groups[i].addTo(peers_map);
                  }
                } else {
                  marker_groups[i].addTo(peers_map);
                }
              }
            }

            /**
             * Save current (different from previous) objects
             */
            controls_previous = L.control.layers(marker_groups, '', {collapsed:false}).addTo(peers_map);
            marker_groups_previous = marker_groups;
          }
        });

        /**
         * List neighbouring peers
         */
        socket.on('nodes_connected', function(nodes_connected) {
          $('#table_getpeerinfo').empty();

          var table = $('<table id="neighbouring_nodes_table" class="table table-striped table-hover"><thead><tr><th>Neighbouring peers</th><th>Country</th><th>Last sent</th><th>Last received</th><th>Established</th><th>Protocol</th><th>Version</th><th>Inbound</th><th>Starting height</th><th>Ban score</th></tr></thead></table>');

          nodes_connected.forEach(function(node) {
            /**
             * Check if country is set and update accordingly
             */
            if (node.hasOwnProperty('country')) {
              var country = node.country;
            } else {
              var country = 'Updating..';
            }

            table.append('<tr><td>' + node.addr + '</td><td>' + country + '</td><td>' + moment(node.lastsend).format('YYYY-MM-DD HH:mm:ss') + '</td><td>' + moment(node.lastrecv).format('YYYY-MM-DD HH:mm:ss') + '</td><td>' + moment(node.conntime).fromNow() + '</td><td>' + node.version + '</td><td>' + node.subver_clean + '</td><td>' + node.inbound + '</td><td>' + node.startingheight + '</td><td>' + node.banscore + '/100</td></tr>');
          });

          $('#table_getpeerinfo').append(table);
          peers_table = $('#neighbouring_nodes_table').DataTable({
            'searching':false,
            'paging':false,
            'info':false,
            'order':[[6,'desc']]
          });
        });

    #view-maintenance.hidden
      .row
        .col-md-6
          .row
            .col-md-12
              .panel.panel-default
                .panel-heading
                  p.nopadding
                    i.glyphicon.glyphicon-piggy-bank &nbsp;
                    | Change passphrase
                .panel-body
                  p Change your wallet passphrase.
                  form(id='form_wallet_passphrase_change')
                    input.col-md-7(id='input_old_passphrase', type='password', placeholder='Old passphrase')
                    input.col-md-7(id='input_new_passphrase', type='password', placeholder='New passphrase')
                    input.col-md-7(id='input_new_passphrase_repeat', type='password', placeholder='Repeat new passphrase')
                    input.col-md-4.btn.pull-right(type='submit', id='button_wallet_passphrase_change', value='Change passphrase')
                  script.
                    /**
                     * Disable the button until inputs are filled and matching
                     */
                    $('#button_wallet_passphrase_change').prop('disabled', true);
                    $('#form_wallet_passphrase_change input').keyup(function() {
                      if ($('#input_old_passphrase').val()) {
                        if ($('#input_new_passphrase').val() && $('#input_new_passphrase_repeat').val()) {
                          if ($('#input_new_passphrase').val() === $('#input_new_passphrase_repeat').val()) {
                            $('#button_wallet_passphrase_change').prop('disabled', false);
                          } else {
                            $('#button_wallet_passphrase_change').prop('disabled', true);
                          }
                        }
                      }
                    });

                    $('#form_wallet_passphrase_change').on('submit', function(e) {
                      e.preventDefault();

                      socket.emit('walletpassphrasechange', {
                        'old':$('#input_old_passphrase').val(),
                        'new':$('#input_new_passphrase').val()
                      });

                      /**
                       * Clear input fields and disable button
                       */
                      $('#form_wallet_passphrase_change').find('input[type=password]').val('');
                      $('#button_wallet_passphrase_change').prop('disabled', true);
                    });

              .panel.panel-default
                .panel-heading
                  p.nopadding
                    i.glyphicon.glyphicon-folder-open &nbsp;
                    | Dump private keys
                .panel-body
                  p Dump individual private key or dump your whole wallet to a comma-separated values (CSV) file inside of your Vanilla data directory.
                  form(id='form_dump_private_key')
                    input.col-md-5(id='input_dump_private_key', type='text', placeholder='Valid public key from this wallet')
                    input.col-md-3.btn.btn-m-l(type='submit', id='button_dump_private_key', value='Dump private key')
                    input.col-md-3.btn.pull-right(type='button', id='button_dump_wallet', value='Dump wallet')
                  script.
                    /**
                     * Disable the button until input is filled
                     */
                    $('#button_dump_private_key').prop('disabled', true);
                    $('#input_dump_private_key').keyup(function() {
                      $('#button_dump_private_key').prop('disabled', this.value === '' ? true : false);
                    });

                    /**
                     * Allow only backspace, delete, left arrow, right arrow, enter, 1-9 a-zA-Z, numpad 1-9
                     */
                    $('#input_dump_private_key').keydown(function(e) {
                      if (!(e.keyCode === 46 || e.keyCode === 8 || e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 13 || (e.keyCode >= 49 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 105))) {
                        e.preventDefault();
                      }
                    });

                    $('#form_dump_private_key').on('submit', function(e) {
                      e.preventDefault();
                      socket.emit('dumpprivkey', $('#input_dump_private_key').val());
                    });

                    $('#button_dump_wallet').click(function() {
                      socket.emit('dumpwallet', true);
                    });

        .col-md-4.col-md-offset-2
          .row.pull-right
            .col-md-12
              .panel.panel-default
                .panel-heading
                  p.nopadding
                    i.glyphicon.glyphicon-file &nbsp;
                    | Export transaction history
                .panel-body
                  p Exports your transaction history to a comma-separated values (CSV) file inside of your WebUI directory.
                  input.btn.col-md-12(type='button', id='button_dump_transaction_history', value='Export')
                  script.
                    $('#button_dump_transaction_history').click(function() {
                      socket.emit('dumptxhistory', true);
                    });

            .col-md-12
              .panel.panel-default
                .panel-heading
                  p.nopadding
                    i.glyphicon.glyphicon-download-alt &nbsp;
                    | Backup wallet
                .panel-body
                  p Backups your wallet to a timestamped .dat file inside of your Vcash executable directory.
                  input.btn.col-md-12(type='button', id='button_backup_wallet', value='Backup')
                  script.
                    $('#button_backup_wallet').click(function() {
                      socket.emit('backupwallet', true);
                    });

            .col-md-12
              .panel.panel-default
                .panel-heading
                  p.nopadding
                    i.glyphicon.glyphicon-zoom-in &nbsp;
                    | Check wallet
                .panel-body
                  p Checks the wallet for inconsistencies and reports them below.
                  #check_wallet_response
                  input.btn.col-md-12(type='button', id='button_check_wallet', value='Check')
                  script.
                    $('#button_check_wallet').click(function() {
                      socket.emit('checkwallet', true);
                      socket.on('checkwallet_response', function(obj) {
                        $('#check_wallet_response').empty();

                        for (var key in obj) {
                          $('#check_wallet_response').append('<p class="nopadding">' + key + ': ' + obj[key] + '</p>');
                        }
                      });
                    });

            .col-md-12
              .panel.panel-default
                .panel-heading
                  p.nopadding
                    i.glyphicon.glyphicon-wrench &nbsp;
                    | Repair wallet
                .panel-body
                  p Repairs the wallet if an inconsistency is found and shows report below.
                  #repair_wallet_response
                  input.btn.col-md-12(type='button', id='button_repair_wallet', value='Repair')
                  script.
                    $('#button_repair_wallet').click(function() {
                      socket.emit('repairwallet', true);
                      socket.on('repairwallet_response', function(obj) {
                        $('#repair_wallet_response').empty();

                        for (var key in obj) {
                          $('#repair_wallet_response').append('<p class="nopadding">' + key + ': ' + obj[key] + '</p>');
                        }
                      });
                    });

  footer.footer
    .container-fluid
      .row
        .col-md-2
          p.text-muted
            b #[span#version]
        .col-md-8
          p.text-muted.text-center
            i.glyphicon.glyphicon-briefcase
            | &nbsp; Trading at &nbsp;
            b #[span#vnl_btc] BTC ~ #[span#vnl_local] &nbsp;&nbsp;&nbsp;&nbsp;
            i.glyphicon.glyphicon-scale
            | &nbsp; Market capitalization &nbsp;
            b #[span#vnl_local_marketcap] &nbsp;&nbsp;&nbsp;&nbsp;
            i.glyphicon.glyphicon-stop
            | &nbsp; On block &nbsp;
            b #[span#blocks] &nbsp;&nbsp;&nbsp;&nbsp;
            i.glyphicon.glyphicon-globe
            | &nbsp; Connected to &nbsp;
            b #[span#connected_to_nodes]
            | &nbsp; nodes
        .col-md-2
          .btn-group.dropup.pull-right.btn-m-l
            button(type='button', class='btn btn-default dropdown-toggle', data-toggle='dropdown').
              #[span#select_local_currency]
            ul.dropdown-menu#select_currency
            script.
              socket.on('local_currencies', function(local_currencies) {
                for (var i in local_currencies) {
                  $('<li><a href="#">' + i + '</a></li>').appendTo('#select_currency');
                }

                $('ul#select_currency li').click(function(e) {
                  socket.emit('settings_set', {
                    'property':'local_currency',
                    'value':$(this).text()}
                  );
                  socket.emit('cache_send', 'watch_addresses');
                  socket.emit('cache_send', 'accounts');
                  socket.emit('cache_send', 'transactions.log');

                  /**
                   * Hide conversion info on currency switch and clear input field
                   */
                  if (!$('#convert_currency').hasClass('hidden')) {
                    $('#convert_currency').toggleClass('hidden');
                  }

                  $('#input_convert_amount').val('');
                });
              });

          .btn-group.dropup.pull-right
            button(type='button', class='btn btn-default dropdown-toggle', data-toggle='dropdown').
              Theme
            ul.dropdown-menu#select_stylesheet
            script.
              socket.on('stylesheets', function(stylesheets) {
                stylesheets.forEach(function(stylesheet) {
                  $('<li><a href="#">' + _.capitalize(stylesheet.split('.')[0]) + '</a></li>').appendTo('#select_stylesheet');
                });

                $('ul#select_stylesheet li').click(function(e) {
                  socket.emit('settings_set', {
                    'property':'stylesheet',
                    'value':$(this).text().toLowerCase()
                  });

                  $('head link#theme').attr('href', '/stylesheets/' + $(this).text().toLowerCase() + '.css');
                });
              });
